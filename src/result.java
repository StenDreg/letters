
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Sten.Dreger
 */
public class result extends javax.swing.JFrame {

    static Pattern regex = Pattern.compile("^[a-zA-Z]*$");

    /**
     * Creates new form result
     */
    public result() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        plnmain = new javax.swing.JPanel();
        Opencsv = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        plnmain.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0))));

        Opencsv.setText("OPEN");
        Opencsv.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()));
        Opencsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpencsvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plnmainLayout = new javax.swing.GroupLayout(plnmain);
        plnmain.setLayout(plnmainLayout);
        plnmainLayout.setHorizontalGroup(
            plnmainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Opencsv, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
        );
        plnmainLayout.setVerticalGroup(
            plnmainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Opencsv, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plnmain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(plnmain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpencsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpencsvActionPerformed
        FileFilter ft = new FileNameExtensionFilter("Text Files", "txt");
        FileFilter ft2 = new FileNameExtensionFilter("CSV Files", "csv");

        fileChooser.addChoosableFileFilter(ft);
        fileChooser.addChoosableFileFilter(ft2);

        int returnVal = fileChooser.showOpenDialog(this);

        if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {

            java.io.File file = fileChooser.getSelectedFile();

            fileChooser.setSelectedFile(new File("output.csv"));
            int saveReturn = fileChooser.showSaveDialog(this);
            if (saveReturn == javax.swing.JFileChooser.APPROVE_OPTION) {
                BufferedReader in;
                java.io.File saveFile = fileChooser.getSelectedFile();
                try {
                    in = new BufferedReader(new FileReader(file));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(result.class.getName()).log(Level.SEVERE, null, ex);
                    return;
                }

                BufferedWriter bw;
                try (FileWriter writer = new FileWriter(saveFile, true)) {
                    bw = new BufferedWriter(writer);

                    in.lines().forEach((line) -> {
                        String[] data = line.split(";");
                        try {
                            for (int i = 0; i < data.length; i++) {
                                String column = data[i];
                                if (regex.matcher(column).matches()) {
                                    bw.append(column);
                                }
                                if (i < data.length) {
                                    bw.append(";");
                                }

                            }
                            bw.append(System.lineSeparator());
                        } catch (IOException ex) {
                            Logger.getLogger(result.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    });
                    writer.close();

                } catch (FileNotFoundException ex) {
                    Logger.getLogger(result.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(result.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        in.close();
                    } catch (IOException ex) {
                        Logger.getLogger(result.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
    }//GEN-LAST:event_OpencsvActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(result.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // -define .csv file in app
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new result().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Opencsv;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JPanel plnmain;
    // End of variables declaration//GEN-END:variables
}
